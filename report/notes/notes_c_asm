=== C ===

Nous avons commencé par créer manuellement des FST très basiques (en adaptant légèrement le format défini par AT&T pour décrire des FST dans un fichier texte). Nous nous en servirons comme jeu de tests pour tout nos programmes futurs.

Pour nos premiers POC, nous somme partis avec les langages que nous maîtrisions le plus (à savoir, Bash et C) pour pouvoir se concentrer sur le coeur de l'algorithme.

Le principe est d'avoir un script shell qui prenne en entrée un fichier texte contenant une FST, et de générer dynamiquement un code C qui puisse parcourir cette FST. L'idée est de générer un algorithme naïf, et d'avoir un code très long, mais dont toutes les étapes soient très simples. On espère ainsi avoir de très bonnes performances, quitte à avoir un programme très gros, mais potentiellement optimisable/raccourcissable par le compilateur.

La première étape pour construire ce script est bien sûr de prévoir la forme qu'aura le code C généré : nous sommes partis sur une fonction contenant de multiples label correspondant chacun à un state/node et contenant un switch qui, suivant la lettre courrante fait un goto sur le label du state/node suivant, ou un return d'un code d'erreur si le token d'entrée ne match pas la FST.
Cette fonction prends comme seul paramètre d'entrée une chaine (tableau de char), qui sera le token d'entrée dont on veut connaitre la valeur et retourne le poids cumulé de tout les arcs traversé, ou -1 en cas d'erreur. Il faut donc noté qu'avec cette méthode on ne peut pas supporter de poids négatifs, au risque d'avoir une collision entre le code d'erreur et un poids cumulé effectivement négatif. Pour gérer ce cas, le plus simple serait d'utiliser errno.

Le code a été un peu moins simple que prévu pour pouvoir générer du C valide, en effet, il y a un certain nombre de cas particuliers à gérer, pour gérer correctement les erreurs, de multiples nodes de fins.

Au final, un node/state générera un code semblable à ceci (pour un node appellé "7", qui possède un arc pour le caractère 'X' avec un poids de 6 et qui va au node "21", et un arc pour le caractère 'Y' avec un poids nulle et allant au node "42") :
                                           
NODE_7 :
    switch(token[pos++]) {
        case 'X' :
            total += 6;
            goto NODE_21;
        case 'Y' :
            goto NODE_42;
        default :
            return -1;
    }

On remarque que l'on a un counter "pos" qu'on incrémente de manière inconditionnel, vu que l'on se déplace toujours un caractère par un caractère.

Pour pouvoir facilement lancé le programme généré, nous avons rajouté une fonction main qui appelle juste notre fonction compute_fst sur le premier argument de la command line, rendant ainsi le programme autonome.

Il nous suffit donc, pour générer quelque chose d'utilisable de faire ceci :
./gen.sh file.fst | gcc -x c -o fst -
Puis :
./fst LE_TOKEN

Les options sur gcc (on peut aussi rajouter un -O3 pour optimiser au maximum la compilation) servant seulement de prendre l'entrée standard comme "fichier" source, puisque gen.sh affiche le code généré sur la sortie standard.

=== Assembleur ===

Sachant qu'on devrait sûrement au final généré du bytecode, nous avons décidé que, quitte à avoir du C, autant aller jusqu'à générer directement de l'assembleur. Pas spécialement pour être plus performant que le C (en effet, l'assembleur  généré par gcc sera toujours plus éfficace que celui que l'on peut faire à la main), mais pour avoir des idées des problèmes que l'on rencontrera en java/bytecode.

Quand nous parlons d'assembleur, nous entendons "assembleur x86_64" bien sûr, soit l'assembleur qui est généré par gcc sur nos machines.

En donnant l'option "-S" à gcc, on obtient non pas un binaire éxécutable, mais un fichier ".s" qui contient le code assembleur généré (avant l'assemblage éffectif en binaire). En le générant pour nos sources C, nous avons pu faire du rétro-engineering dessus et comprendre la marche à suivre pour notre deuxième script.

La première partie, pour adapter toutes les parties générées de manière statique, a été relativement aisé. Par exemple, la déclaration de la fonction main, bien que plus longue et moins lisible qu'en C pouvait être plus ou moins copié/collé par rapport à ce que générait gcc, et même si quelques lignes restaient un peu mystérieuse au moment de la mise en place de "l'environnement" de la fonction, ce n'était absolument pas bloquant.

A l'opposé, lorsqu'il a fallu adapter les parties générées dynamiquement, ce fut beaucoup moins simple.
Nous avons du, l'espace d'un instant, changer notre façon de programmer. En effet, l'assembleur est tellement bas niveau que l'on ne dispose pas de toutes les "syntactic sugar" dont on a tant l'habitude, nottament pour le contrôle de flux. Par exemple, ce n'est pas si simple que ça de faire un "if (...) single_instruction ;", il faut gérer deux saut, les labels associés, potentiellement, préparer un ou deux registres, etc...
